from typing import List

import numpy as np

import galois as gl
from cipher.base import BlockCipher
from utils import BYTE_BITS, rotl_arr, rotr_arr, add_padding
from validators import value_in_list

# Number of state's rows.
STATE_ROWS = 4

# Length of word in bits.
WORD_BITS = 32

# Length of word in bytes.
WORD_BYTES = WORD_BITS // BYTE_BITS

# Length of block in words. Possible values: 4, 6, 8.
N_B = 4

# Length of key in words. Possible values: 4, 6, 8.
N_K = 4

# Substitution box (lookup table).
SBOX = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

# Inverse substitution box (lookup table).
INV_SBOX = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
]

# Round constant (lookup table).
RCON = [
    0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40,
    0x80, 0x1b, 0x36, 0x6c,
    0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a,
    0xd4, 0xb3, 0x7d, 0xfa,
    0xef, 0xc5, 0x91, 0x39
]

# Polynomial used in MixColumns().
POLY = [0x02, 0x03, 0x01, 0x01]

# Inverse polynomial used in MixColumns().
INV_POLY = [0x0e, 0x0b, 0x0d, 0x09]


def _sub_bytes(array: np.ndarray, is_inverse: bool) -> np.ndarray:
    """Perform a substitution where each element of an array is replaced
    with a corresponding one from a lookup table."""
    box = SBOX if not is_inverse else INV_SBOX

    for elem in np.nditer(array, op_flags=['readwrite']):
        i, j = elem // 16, elem % 16
        elem[...] = box[i][j]

    return array


def _shift_rows(state: np.ndarray, is_inverse: bool) -> np.ndarray:
    """Perform a transposition where the last three rows of the state
    are shifted cyclically a certain number of steps."""
    shift = rotl_arr if not is_inverse else rotr_arr

    for i, row in enumerate(state):
        state[i] = shift(row, i)

    return state


def _mix_columns(state: np.ndarray, is_inverse: bool) -> np.ndarray:
    """Perform a linear mixing operation on the columns of the state,
    combining the four bytes in each column."""
    state = state.T

    polynomial = POLY if not is_inverse else INV_POLY
    polynomial = np.array(polynomial)

    for col_i, col in enumerate(state):
        old_col = np.copy(col)
        for row_i in range(STATE_ROWS):
            products = list(map(gl.mul_by_hex, old_col, polynomial))
            col[row_i] = np.bitwise_xor.reduce(products)
            polynomial = rotr_arr(polynomial, 1)

    return state.T


def _add_round_key(state: np.ndarray, subkey: np.ndarray) -> np.ndarray:
    """Perform a bitwise xor of the state and the round key."""
    return np.bitwise_xor(state, subkey)


def _get_n_r(n_b: int, n_k: int) -> int:
    """Get the N_R constant (number of rounds) based on N_B and N_K."""
    if n_b == 8 or n_k == 8:
        return 14
    elif n_b == 6 or n_k == 6:
        return 12
    elif n_b == 4 or n_k == 4:
        return 10


class Rijndael(BlockCipher):
    """Class that encapsulates the Rijndael cipher's logic."""

    def __init__(self, n_b: int = N_B, n_k: int = N_K) -> None:
        self.__validate_init_params(n_b, n_k)
        super().__init__(n_b * WORD_BYTES, n_k * WORD_BYTES)
        self.n_b, self.n_k = n_b, n_k
        self.n_r = _get_n_r(n_b, n_k)
        self.__key_schedule = None

    @staticmethod
    def __validate_init_params(n_b: int, n_k: int) -> None:
        """Validate initialization parameters."""
        allowed_values = [4, 6, 8]

        value_in_list("N_B", n_b, allowed_values)
        value_in_list("N_K", n_k, allowed_values)

    def __key_expansion(self, key_ints: List[int]) -> np.ndarray:
        """Perform a derivation of round keys from the main key
        using Rijndael key schedule."""
        n_b, n_k, n_r = self.n_b, self.n_k, self.n_r
        key_schedule = np.resize(key_ints, (n_k, STATE_ROWS))

        for col_i in range(n_k, n_b * (n_r + 1)):
            w_i_prev = key_schedule[col_i - 1]

            if col_i % n_k == 0:
                w_i_prev = _sub_bytes(rotl_arr(w_i_prev, 1), False)
                w_i_prev = np.bitwise_xor(w_i_prev, RCON[col_i // n_k])
            elif n_k == 8 and col_i % n_k == 4:
                w_i_prev = _sub_bytes(w_i_prev, False)

            w_i_corr = key_schedule[col_i - n_k]
            w_i = np.bitwise_xor(w_i_prev, w_i_corr)
            key_schedule = np.vstack([key_schedule, w_i])

        return key_schedule

    def _set_key(self, key: str, is_encrypt: bool) -> None:
        """Validate and set the key."""
        key_ints = self._preprocess_key(key)
        key_ints = add_padding(key_ints, self.key_bytes)
        self.__key_schedule = self.__key_expansion(key_ints)

    def _encrypt_block_ints(self, block_ints: List[int]) -> List[int]:
        """Encrypt the text block's integers."""
        n_b, n_r = self.n_b, self.n_r
        key_schedule = self.__key_schedule
        state = np.resize(block_ints, (n_b, STATE_ROWS)).T

        subkey = key_schedule[0:n_b].T
        state = _add_round_key(state, subkey)

        for round_n in range(1, n_r):
            state = _sub_bytes(state, False)
            state = _shift_rows(state, False)
            state = _mix_columns(state, False)
            subkey = key_schedule[round_n * n_b:(round_n + 1) * n_b].T
            state = _add_round_key(state, subkey)

        state = _sub_bytes(state, False)
        state = _shift_rows(state, False)
        subkey = key_schedule[n_r * n_b:(n_r + 1) * n_b].T
        state = _add_round_key(state, subkey)

        return state.T.flatten().tolist()

    def _decrypt_block_ints(self, block_ints: List[int]) -> List[int]:
        """Decrypt the cipher block's integers."""
        n_b, n_r = self.n_b, self.n_r
        key_schedule = self.__key_schedule
        state = np.resize(block_ints, (n_b, STATE_ROWS)).T

        subkey = key_schedule[n_r * n_b:(n_r + 1) * n_b].T
        state = _add_round_key(state, subkey)

        for round_n in range(n_r - 1, 0, -1):
            state = _shift_rows(state, True)
            state = _sub_bytes(state, True)
            subkey = key_schedule[round_n * n_b:(round_n + 1) * n_b].T
            state = _add_round_key(state, subkey)
            state = _mix_columns(state, True)

        state = _shift_rows(state, True)
        state = _sub_bytes(state, True)

        state = _add_round_key(state, key_schedule[0:n_b].T)

        return state.T.flatten().tolist()
